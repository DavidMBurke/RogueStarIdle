@using RogueStarIdle.ServerApplication.Shared.State;
@inject TimeState timeState;
@inject InventoryState inventoryState;
@inject ActionState actionState;
@inject CharacterState characterState;
@inject SaveState saveState;
@inject IJSRuntime JSRuntime
@using System.Text.Json;
@using System.Reflection;
@using System.Security.Cryptography;
@using System.Text;
@using System.IO.Compression;
@using System.Timers

<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>


@code {
    System.Timers.Timer timer = new Timer(30000);
    protected override void OnInitialized()
    {
        timer.Elapsed += Autosave;
        timer.Enabled = true;
        timer.Start();
        saveState.Load(LoadFromLocalStorage);
        if (characterState.Party.Count == 0)
        {
            characterState.Party.Add(characterState.MainCharacter);
            characterState.Party.Add(characterState.SideCharacters[0]);
            characterState.Party.Add(characterState.SideCharacters[1]);
            characterState.Party.Add(characterState.SideCharacters[2]);
            characterState.Party.Add(characterState.SideCharacters[3]);
        }
        characterState.Party.ForEach(c => c.Equipment.CalculateStats(c));
        characterState.Party.ForEach(c => c.CurrentHealth = c.Equipment.Stats.MaxHealth);
        characterState.SelectedCharacter = characterState.MainCharacter;

        base.OnInitialized();
    }

    private string key = "Rogue Star Baybeeeee";
    private string importExport = "";

    private async Task<string> LoadFromLocalStorage(string key)
    {
        return await JSRuntime.InvokeAsync<string>("localStorage.getItem", key);
    }

    public async Task SaveToLocalStorage(string key, string value)
    {
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", key, value);
    }

    private async void Autosave(object sender, ElapsedEventArgs e)
    {
        await SaveStateToLocalStorage();
    }

    private async Task SaveStateToLocalStorage()
    {
        await saveState.Save(SaveToLocalStorage);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SaveStateToLocalStorage();
        }
    }

}