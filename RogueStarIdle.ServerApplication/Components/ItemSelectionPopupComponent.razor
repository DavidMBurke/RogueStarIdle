@inject IViewItemsByNameUseCase ViewItemsByNameUseCase
@inject IViewItemsByTagUseCase ViewItemsByTagUseCase
@using RogueStarIdle.ServerApplication.Shared.State;
@inject InventoryState inventoryState;

<div class="column" style="height:75%; width:100%; overflow-y: scroll;">
    <SearchInventoryComponent OnSearchInventory="OnInventorySearch" />
    <button @onclick="() => addEverything()">Add Every Item</button>
    <div style="height:75%; width:100%; overflow-y: scroll;">
        @foreach (Item item in listItems)
        {
            <h6>
                @item.Name 
                Qty: <input style="width:20px;" @bind-value="item.Quantity"/>
                @if (item.MaxQualityLevel > 0)
                {
                    <div>
                        Lvl: 
                        <input style="width:20px;" @bind-value="item.QualityLevel"/>
                    </div>
                }
                <button @onclick="() => inventoryState.AddToInventory(inventoryState.Inventory, item, item.Quantity)">Add Item</button>
            </h6>
        }
    </div>
</div>


@code {
    private List<Item> listItems = new List<Item>();

    [Parameter] public string searchTerm { get; set; } = string.Empty;

    private void OnInventorySearch(string searchTerm)
    {
        this.searchTerm = searchTerm;
        SetParametersAsync(ParameterView.Empty);
    }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        listItems = (await ViewItemsByNameUseCase.ExecuteAsync(this.searchTerm)).ToList();
        listItems = listItems.Union(await ViewItemsByTagUseCase.ExecuteAsync(this.searchTerm)).ToList();
        StateHasChanged();
    }

    public void addEverything()
    {
        foreach (Item item in listItems)
        {
            inventoryState.AddToInventory(inventoryState.Inventory, item, 1000);
        }
    }

}
