@page "/marra"
@using RogueStarIdle.PlugIns.InMemory;
@using RogueStarIdle.ServerApplication.Shared.State;
@inject ScavengingState scavengingState;
@inject InventoryState inventoryState;
@inject IItemUseCases GetItemByIdUseCase

<div class="page-content-container">
    <div class="column" style="width: 100%">
        <h1> Marra </h1>
        <div class="row" style="width: 100%">
            <div class="column" style="width:15%">
                <button @onclick='() => SelectLocation("azuraliPlains")'>Azurali Plains</button>
                <button @onclick='() => SelectLocation("noxiousWetlands")'>Noxious Wetlands</button>
                <button @onclick='() => SelectLocation("rockyOutcropping")'>Rocky Outcropping</button>
                <button @onclick='() => SelectLocation("ancientRuins")'>Ancient Ruins</button>
                <button @onclick='() => SelectLocation("plateau")'>Plateau</button>
                <button @onclick='() => SelectLocation("cobaltForest")'>Cobalt Forest</button>
                <button @onclick='() => SelectLocation("darkChasm")'>Dark Chasm</button>
                <button @onclick='() => SelectLocation("ancientFactory")'>Ancient Factory</button>
            </div>
            <div class="column">
                @switch (location)
                {
                    case "azuraliPlains":
                        {
                            <h1> Azurali Plains </h1>
                            <div class="row">
                                <div class="column">
                                    <button @onclick="() => SelectScavenge()" style=@(scavengingState.IsScavenging? "background-color: green" : "")> Scavenge </button>
                                    <button @onclick="() => CollectAll()"> Collect gathered Items </button>
                                </div>
                                @if (inventoryState.AzuraliPlainsStorage.Any<Item>())
                                {
                                    <text>Items to collect:<br/></text>
                                }
                                @foreach (Item item in inventoryState.AzuraliPlainsStorage)
                                {
                                    <text>@item.Quantity x @item.Name<br/></text>
                                }
                            </div>

                            break;
                        }
                    default:
                        {
                            break;
                        }
                }
            </div>
        </div>
    </div>
</div>


@code {
    private string location = "";
    protected override async Task OnInitializedAsync()
    {
        inventoryState.OnChange += UpdateState;
        await base.OnInitializedAsync();
    }

    async Task UpdateState()
    {
        await InvokeAsync(StateHasChanged);
    }

    void SelectLocation(string name)
    {
        location = name;
    }

    async void SelectScavenge ()
    {
        if (scavengingState.IsScavenging)
        {
            scavengingState.IsScavenging = false;
            return;
        }
        scavengingState.IsScavenging = true;
        scavengingState.ScavengeableItems = new List<(Item item, int dropChanceNum, int dropChanceDenom, int quantityRangeMin, int quantityRangeMax)>()
        {
            (await GetItemByIdUseCase.ExecuteAsync(2), 10, 100, 1, 2),
            (await GetItemByIdUseCase.ExecuteAsync(3), 10, 100, 1, 2)
        };
        scavengingState.SurvivalXpAtLocation = 1;
        scavengingState.SelectedStorage = inventoryState.AzuraliPlainsStorage;
    }

    async void CollectAll ()
    {
        inventoryState.Transfer(inventoryState.AzuraliPlainsStorage, inventoryState.Inventory);
    }
}