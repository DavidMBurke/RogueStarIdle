@page "/marra"
@using RogueStarIdle.PlugIns.InMemory;
@using RogueStarIdle.ServerApplication.Shared.State;
@inject ActionState actionState;
@inject InventoryState inventoryState;
@inject CharacterState characterState;
@inject IItemUseCases GetItemByIdUseCase
@inject IMobUseCases GetMobByIdUseCase

<div class="page-content-container">
    <div class="column" style="width: 100%">
        <h1> Marra </h1>
        <div class="row" style="width: 100%">
            <div class="column" style="width:15%">
                <button @onclick='() => SelectLocation("azuraliPlains")'>Azurali Plains</button>
                <button @onclick='() => SelectLocation("noxiousWetlands")'>Noxious Wetlands</button>
                <button @onclick='() => SelectLocation("rockyOutcropping")'>Rocky Outcropping</button>
                <button @onclick='() => SelectLocation("ancientRuins")'>Ancient Ruins</button>
                <button @onclick='() => SelectLocation("plateau")'>Plateau</button>
                <button @onclick='() => SelectLocation("cobaltForest")'>Cobalt Forest</button>
                <button @onclick='() => SelectLocation("darkChasm")'>Dark Chasm</button>
                <button @onclick='() => SelectLocation("ancientFactory")'>Ancient Factory</button>
            </div>
            <div class="column" style="width: 85%;">
                @switch (selectedLocation)
                {
                    case "azuraliPlains":
                        {
                            locationStorage = inventoryState.AzuraliPlainsStorage;
                            <h1> Azurali Plains </h1>
                            <div class="row">
                                <button @onclick="() => SelectExplore(azuraliPlainsexploreables, azuraliPlainsMobs, selectedLocation, inventoryState.AzuraliPlainsStorage)" style=@("height: 30px; width: 33%;" + (actionState.IsExploring? "background-color: green" : ""))> explore </button>
                                <button @onclick="() => SelectBuild()" style=@("height: 30px; width: 33%;" + (displayBuildPage? "background-color: green" : ""))> Build </button>
                                <button @onclick="() => CollectAll()" style="height: 30px; width:33%;"> Collect gathered Items </button>
                            </div>
                            break;
                        }
                    case "noxiousWetlands":
                        {
                            locationStorage = inventoryState.NoxiousWetlandsStorage;
                            <h1>Noxious Wetlands</h1>
                            break;
                        }
                    case "rockyOutcropping":
                        {
                            locationStorage = inventoryState.RockyOutcroppingStorage;
                            <h1>Rocky Outcropping</h1>
                            break;
                        }
                    case "ancientRuins":
                        {
                            locationStorage = inventoryState.AncientRuinsStorage;
                            <h1>Ancient Ruins</h1>
                            break;
                        }
                    case "plateau":
                        {
                            locationStorage = inventoryState.PlateauStorage;
                            <h1>Plateau</h1>
                            break;
                        }
                    case "cobaltForest":
                        {
                            locationStorage = inventoryState.CobaltForestStorage;
                            <h1>Cobalt Forest</h1>
                            break;
                        }
                    case "darkChasm":
                        {
                            locationStorage = inventoryState.DarkChasmStorage;
                            <h1>Dark Chasm</h1>
                            break;
                        }
                    case "ancientFactory":
                        {
                            locationStorage = inventoryState.AncientFactoryStorage;
                            <h1>Ancient Factory</h1>
                            break;
                        }
                    default:
                        {
                            break;
                        }
                }
                <div class="row">
                    @if (actionState.IsInCombat && actionState.location == selectedLocation && displayExplorePage)
                    {
                        <CombatScreenComponent />
                    }
                    @if (displayBuildPage)
                    {
                        <p1> Build Page Placeholder</p1>
                    }
                    <div class="column">
                        @if (locationStorage.Any<Item>())
                        {
                            <text>Items to collect:<br/></text>
                        }
                        <div class="column" style="display: flex; flex-direction: row; flex-wrap: wrap;">
                            @foreach (Item item in locationStorage)
                            {
                                <InventoryItemComponent item=@item/>
                            }                    
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    private string selectedLocation = "";
    private List<ItemDrop> azuraliPlainsexploreables = new List<ItemDrop>();
    private List<MobSpawn> azuraliPlainsMobs = new List<MobSpawn>();
    private List<Item> locationStorage = new List<Item>();
    private bool displayBuildPage = false;
    private bool displayExplorePage = false;

    protected override async Task OnInitializedAsync()
    {
        inventoryState.OnChange += UpdateState;
        actionState.OnChange += UpdateState;
        await base.OnInitializedAsync();
        azuraliPlainsexploreables = new List<ItemDrop>
        {
            new ItemDrop (await GetItemByIdUseCase.ExecuteAsync(3), 10, 100, 1, 2),
            new ItemDrop (await GetItemByIdUseCase.ExecuteAsync(14), 10, 100, 1, 2)
        };
        azuraliPlainsMobs = new List<MobSpawn>
        {
            new MobSpawn (await GetMobByIdUseCase.ExecuteAsync(0), 10)
        };
    }

    async Task UpdateState()
    {
        await InvokeAsync(StateHasChanged);
    }

    void SelectLocation(string name)
    {
        selectedLocation = name;
    }

    void SelectExplore(List<ItemDrop> scavengables, List<MobSpawn> mobs, string location, List<Item> locationStorage)
    {
        if (actionState.IsExploring && location == actionState.location)
        {
            actionState.LeaveExploring();
            displayExplorePage = false;
            return;
        }
        actionState.EnterExplore(scavengables, mobs, location, locationStorage);
        displayExplorePage = true;
        displayBuildPage = false;
    }

    void SelectBuild()
    {
        displayBuildPage = true;
        displayExplorePage = false;
    }

    async void CollectAll()
    {
        await inventoryState.Transfer(inventoryState.AzuraliPlainsStorage, inventoryState.Inventory);
    }
}