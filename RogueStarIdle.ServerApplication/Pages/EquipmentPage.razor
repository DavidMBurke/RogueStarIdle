@page "/equippedItems"
@using RogueStarIdle.ServerApplication.Shared.State;
@inject CharacterState characterState
@inject InventoryState inventoryState

<div class="page-content-container">
    <div class="row" style="width:auto; height: 75px;">
        <div class="inventory-grid-container">
            <div class="equipment-row">
                @getEquipmentSlot(selectedCharacter.Equipment.BrainCybernetic1)
                @getEquipmentSlot(selectedCharacter.Equipment.BrainCybernetic2)
                @getEquipmentSlot(selectedCharacter.Equipment.BrainCybernetic3)
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Droid)
            </div>
            <div class="equipment-row">
                @getEquipmentSlot(selectedCharacter.Equipment.BodyCybernetic1)
                @getEquipmentSlot(selectedCharacter.Equipment.BodyCybernetic2)
                @getEquipmentSlot(selectedCharacter.Equipment.BodyCybernetic3)
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Head);
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.DroidMod)
            </div>
            <div class="equipment-row">
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Neck)
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                @getEquipmentSlot(selectedCharacter.Equipment.LeftWeapon)
                @getEquipmentSlot(selectedCharacter.Equipment.RightWeapon)
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Back)
                @getEquipmentSlot(selectedCharacter.Equipment.Torso)
                @getEquipmentSlot(selectedCharacter.Equipment.OmniLinkMod)
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                @getEquipmentSlot(selectedCharacter.Equipment.LeftWeaponMod1)
                @getEquipmentSlot(selectedCharacter.Equipment.RightWeaponMod1)
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Hands)
                @getEquipmentSlot(selectedCharacter.Equipment.Belt)
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Stim)
            </div>
            <div class="equipment-row">
                @getEquipmentSlot(selectedCharacter.Equipment.LeftWeaponMod2)
                @getEquipmentSlot(selectedCharacter.Equipment.RightWeaponMod2)
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Legs)
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.HealthPack)
            </div>
            <div class="equipment-row">
                @getEquipmentSlot(selectedCharacter.Equipment.LeftWeaponMod3)
                @getEquipmentSlot(selectedCharacter.Equipment.RightWeaponMod3)
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Feet)
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                @getEquipmentSlot(selectedCharacter.Equipment.Explosive)
            </div>
        </div>
        <div class="column" style="border-left: 5px solid black; width:200px; display:flex; justify-content: center; padding: 0;">
            <div style="overflow-y:scroll; height: 260px; border-bottom: 5px solid black;">
                <div class="equipped-items-character">Main Character</div>
                <div class="equipped-items-character">Companion 1</div>
                <div class="equipped-items-character">Companion 2</div>
                <div class="equipped-items-character">Companion 3</div>
                <div class="equipped-items-character">Companion 4</div>
                <div class="equipped-items-character">Companion 5</div>
                <div class="equipped-items-character">Companion 6</div>                
                <div class="equipped-items-character">Companion 7</div>
                <div class="equipped-items-character">Companion 8</div>
                <div class="equipped-items-character">Companion 9</div>
            </div>
            <div style="border: 2px solid black; background-color: cornflowerblue; height: 263px; margin-bottom: 3px; overflow-y: scroll;">
                @getTotalEquipmentStatRender(selectedCharacter.Equipment)
            </div>
        </div>
    </div>
</div>


@code {
    public Character selectedCharacter = new Character();
    public RenderFragment? statTooltipFrag = null;
    public double MouseX;
    public double MouseY;
    public Item hoveredItem = null;

    public void renderTooltip(MouseEventArgs e, Item item)
    {
        statTooltipFrag =
        @<div>
            @item.Name <br>
            @if (item.IsWeapon)
                {
                    @getTooltipTextRender("Attack speed: ",item.AttackSpeed)
                    @getTooltipWeaponDamageRender("Slashing", item, item.PercentSlashingDamage)
                    @getTooltipWeaponDamageRender("Crushing", item, item.PercentCrushingDamage)
                    @getTooltipWeaponDamageRender("Piercing", item, item.PercentPiercingDamage)
                    @getTooltipWeaponDamageRender("Fire", item, item.PercentFireDamage)
                    @getTooltipWeaponDamageRender("Acid", item, item.PercentAcidDamage)
                    @getTooltipWeaponDamageRender("Shock", item, item.PercentShockDamage)
                    @getTooltipWeaponDamageRender("Poison", item, item.PercentPoisonDamage)
                }
                @if (item.IsArmor)
                {
                    @getDamageResistanceRender("Energy", item.EnergyDamageReduction)
                    @getDamageResistanceRender("Fire", item.FireDamageReduction, item.EnergyDamageReduction)
                    @getDamageResistanceRender("Acid", item.AcidDamageReduction, item.EnergyDamageReduction)
                    @getDamageResistanceRender("Poison", item.PoisonDamageReduction, item.EnergyDamageReduction)
                    @getDamageResistanceRender("Shock", item.ShockDamageReduction, item.EnergyDamageReduction)
                    @getDamageResistanceRender("Kinetic", item.KineticDamageReduction)
                    @getDamageResistanceRender("Slashing", item.SlashingDamageReduction, item.KineticDamageReduction)
                    @getDamageResistanceRender("Crushing", item.CrushingDamageReduction, item.KineticDamageReduction)
                    @getDamageResistanceRender("Piercing", item.PiercingDamageReduction, item.KineticDamageReduction)
                    @getDamageResistanceRender("Psychic", item.PsychicDamageReduction, item.PsychicDamageReduction)
                    @getDefenseRender("Energy", item.EnergyDefense)
                    @getDefenseRender("Kinetic", item.KineticDefense)
                    @getDefenseRender("Psychic", item.PsychicDefense)
                    @getDefenseRender("Explosive", item.ExplosiveDefense)
                    @getDefenseRender("Ranged", item.RangedDefense)
                    @getDefenseRender("Melee", item.MeleeDefense)
            ;
        }
            </div>
    ;

        hoveredItem = item;
        MouseX = e.ClientX;
        MouseY = e.ClientY;

    }

    public void clearTooltip()
    {
        statTooltipFrag = null;
        hoveredItem = null;
    }

    protected override void OnInitialized()
    {
        selectedCharacter = characterState.MainCharacter;
    }

    private RenderFragment displayEquipment(string slotName, Item item)
    {
        if (item == null)
        {
            return @<text>@slotName</text>;
        }
        RenderFragment imageFragment  = 
        @<div>
            <img src=@item.Thumbnail style="width:100%" @onmouseover="(e) => renderTooltip(e, item)" @onmouseout=clearTooltip/>
            @if (hoveredItem == item && statTooltipFrag != null)
                {
                    <StatPopupComponent stats=statTooltipFrag/>
                }
        </div>;
        return imageFragment;
    }

    private void unEquip(EquipmentSlot equipmentSlot)
    {
        if (equipmentSlot.Item == null)
        {
            return;
        }
        Item unequippedItem = equipmentSlot.Item.CreateCopy();
        inventoryState.RemoveFromInventory(inventoryState.Inventory, unequippedItem, unequippedItem.Quantity);
        unequippedItem.Equipped = false;
        inventoryState.AddToInventory(inventoryState.Inventory, unequippedItem, unequippedItem.Quantity);
        equipmentSlot.Item = null;
    }

    private RenderFragment getTotalEquipmentStatRender(EquipmentSet equipment)
    {
        equipment.CalculateStats(characterState.MainCharacter);
        Stats s = equipment.Stats;
        RenderFragment frag =
        @<div>
            <li>Attack Speed: @s.AttackSpeed</li>
            @getWeaponDamageRender("Slashing", s.SlashingDamageMin, s.SlashingDamageMax)
            @getWeaponDamageRender("Piercing", s.PiercingDamageMin, s.PiercingDamageMax)
            @getWeaponDamageRender("Crushing", s.CrushingDamageMin, s.CrushingDamageMax)
            @getWeaponDamageRender("Fire", s.FireDamageMin, s.FireDamageMax)
            @getWeaponDamageRender("Acid", s.AcidDamageMin, s.AcidDamageMax)
            @getWeaponDamageRender("Poison", s.PoisonDamageMin, s.PoisonDamageMax)
            @getWeaponDamageRender("Shock", s.ShockDamageMin, s.ShockDamageMax)
            @getDefenseRender("Kinetic", s.KineticDefense)
            @getDefenseRender("Energy", s.EnergyDefense)
            @getDefenseRender("Psychic", s.PsychicDefense)
            @getDefenseRender("Melee", s.MeleeDefense)
            @getDefenseRender("Ranged", s.RangedDefense)
            @getDefenseRender("Explosive", s.ExplosiveDefense)
            @getDamageResistanceRender("Energy", s.EnergyDR)
            @getDamageResistanceRender("Fire", s.FireDR, s.EnergyDR)
            @getDamageResistanceRender("Acid", s.AcidDR, s.EnergyDR)
            @getDamageResistanceRender("Poison", s.PoisonDR, s.EnergyDR)
            @getDamageResistanceRender("Shock", s.ShockDR, s.EnergyDR)
            @getDamageResistanceRender("Kinetic", s.KineticDR)
            @getDamageResistanceRender("Piercing", s.PiercingDR, s.KineticDR)
            @getDamageResistanceRender("Slashing", s.SlashingDR, s.KineticDR)
            @getDamageResistanceRender("Crushing", s.CrushingDR, s.KineticDR)
        </div>;
        return frag;
    }

    RenderFragment? getWeaponDamageRender(string type, int minDamage, int maxDamage)
    {
        if (minDamage <= 0 && maxDamage <= 0)
        {
            return null;
        }
        return @<li>@minDamage - @maxDamage @type Damage</li>;
    }

    RenderFragment? getDefenseRender(string type, int defense)
    {
        if (defense > 0)
        {
            return@<li>@type Defense: @defense</li>;
        }
        return null;
    }

    RenderFragment getDamageResistanceRender(string type, int resistance, int? parentResistance = 0)
    {
        if (resistance > 0 && resistance > parentResistance)
        {
            return @<li>@type Damage Resistance: @resistance</li>;
        }
        return null;
    }

    RenderFragment? getTooltipWeaponDamageRender(string type, Item item, int? percentDamage = null)
    {
        int percent = percentDamage ?? 0;
        return @getWeaponDamageRender(type, percent * item.MinBaseDamage / 100, percent * item.MaxBaseDamage / 100);
    }

    RenderFragment? getTooltipTextRender(string statName, int stat)
    {
        if (stat <= 0)
        {
            return@<text>@statName: @stat<br></text>;
        }
        return null;
    }

    RenderFragment getItemStatsPopup(Item item)
    {
        return
        @<div>
        @if (item.IsWeapon)
        {
            @getTooltipTextRender("Attack speed: ",item.AttackSpeed)
            @getTooltipWeaponDamageRender("Slashing", item, item.PercentSlashingDamage)
            @getTooltipWeaponDamageRender("Crushing", item, item.PercentCrushingDamage)
            @getTooltipWeaponDamageRender("Piercing", item, item.PercentPiercingDamage)
            @getTooltipWeaponDamageRender("Fire", item, item.PercentFireDamage)
            @getTooltipWeaponDamageRender("Acid", item, item.PercentAcidDamage)
            @getTooltipWeaponDamageRender("Shock", item, item.PercentShockDamage)
            @getTooltipWeaponDamageRender("Poison", item, item.PercentPoisonDamage)
        }
        @if (item.IsArmor)
        {
            @getDamageResistanceRender("Energy", item.EnergyDamageReduction)
            @getDamageResistanceRender("Fire", item.FireDamageReduction, item.EnergyDamageReduction)
            @getDamageResistanceRender("Acid", item.AcidDamageReduction, item.EnergyDamageReduction)
            @getDamageResistanceRender("Poison", item.PoisonDamageReduction, item.EnergyDamageReduction)
            @getDamageResistanceRender("Shock", item.ShockDamageReduction, item.EnergyDamageReduction)
            @getDamageResistanceRender("Kinetic", item.KineticDamageReduction)
            @getDamageResistanceRender("Slashing", item.SlashingDamageReduction, item.KineticDamageReduction)
            @getDamageResistanceRender("Crushing", item.CrushingDamageReduction, item.KineticDamageReduction)
            @getDamageResistanceRender("Piercing", item.PiercingDamageReduction, item.KineticDamageReduction)
            @getDamageResistanceRender("Psychic", item.PsychicDamageReduction, item.PsychicDamageReduction)
            @getDefenseRender("Energy", item.EnergyDefense)
            @getDefenseRender("Kinetic", item.KineticDefense)
            @getDefenseRender("Psychic", item.PsychicDefense)
            @getDefenseRender("Explosive", item.ExplosiveDefense)
            @getDefenseRender("Ranged", item.RangedDefense)
            @getDefenseRender("Melee", item.MeleeDefense)
        }
            </div>
    ;
    }

    RenderFragment getEquipmentSlot(EquipmentSlot slot) {
        string divClass = "inventory-slot";
        if (slot.Locked) {
            divClass += " locked";
        }
        return @<div class=@divClass @onclick="() => unEquip(slot)">@displayEquipment(slot.Name, slot.Item)</div>;
    }
}
