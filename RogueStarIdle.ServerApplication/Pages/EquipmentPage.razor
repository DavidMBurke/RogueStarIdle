@page "/equippedItems"
@using RogueStarIdle.ServerApplication.Shared.State;
@inject CharacterState characterState
@inject InventoryState inventoryState

<div class="page-content-container">
    <div class="row" style="width:auto; height: 75px;">
        <div class="inventory-grid-container">
            <div class="equipment-row">
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.BrainCybernetic1)">@displayEquipment("Brain Cybernetic 1", selectedCharacter.Equipment.BrainCybernetic1.Item)</div>
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.BrainCybernetic2)">@displayEquipment("Brain Cybernetic 2", selectedCharacter.Equipment.BrainCybernetic2.Item)</div>
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.BrainCybernetic3)">@displayEquipment("Brain Cybernetic 3", selectedCharacter.Equipment.BrainCybernetic3.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.Droid)">@displayEquipment("Droid", selectedCharacter.Equipment.Droid.Item)</div>
            </div>
            <div class="equipment-row">
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.BodyCybernetic1)">@displayEquipment("Body Cybernetic 1", selectedCharacter.Equipment.BodyCybernetic1.Item)</div>
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.BodyCybernetic2)">@displayEquipment("Body Cybernetic 2", selectedCharacter.Equipment.BodyCybernetic2.Item)</div>
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.BodyCybernetic3)">@displayEquipment("Body Cybernetic 3", selectedCharacter.Equipment.BodyCybernetic3.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Head)"> @displayEquipment("Head", selectedCharacter.Equipment.Head.Item) </div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.DroidMod)">@displayEquipment("Droid Mod", selectedCharacter.Equipment.DroidMod.Item)</div>
            </div>
            <div class="equipment-row">
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Neck)">@displayEquipment("Neck", selectedCharacter.Equipment.Neck.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.LeftWeapon)">@displayEquipment("Left Weapon", selectedCharacter.Equipment.LeftWeapon.Item)</div>
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.RightWeapon)">@displayEquipment("Right Weapon", selectedCharacter.Equipment.RightWeapon.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Back)">@displayEquipment("Back", selectedCharacter.Equipment.Back.Item)</div>
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Torso)">@displayEquipment("Torso", selectedCharacter.Equipment.Torso.Item)</div>
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.OmniLinkMod)">@displayEquipment("OmniLink Mod", selectedCharacter.Equipment.OmniLinkMod.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.LeftWeaponMod1)">@displayEquipment("Left Weapon Mod 1", selectedCharacter.Equipment.LeftWeaponMod1.Item)</div>
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.RightWeaponMod1)">@displayEquipment("Right Weapon Mod 1", selectedCharacter.Equipment.RightWeaponMod1.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Hands)">@displayEquipment("Hands", selectedCharacter.Equipment.Hands.Item)</div>
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Belt)">@displayEquipment("Belt", selectedCharacter.Equipment.Belt.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Stim)">@displayEquipment("Stim", selectedCharacter.Equipment.Stim.Item)</div>
            </div> 
            <div class="equipment-row">
                    <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.LeftWeaponMod2)">@displayEquipment("Left Weapon Mod 2", selectedCharacter.Equipment.LeftWeaponMod2.Item)</div>
                    <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.RightWeaponMod2)">@displayEquipment("Right Weapon Mod 2", selectedCharacter.Equipment.RightWeaponMod2.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                    <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Legs)">@displayEquipment("Legs", selectedCharacter.Equipment.Legs.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                    <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.HealthPack)">@displayEquipment("Health Pack", selectedCharacter.Equipment.HealthPack.Item)</div>
            </div>
            <div class="equipment-row">
                    <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.LeftWeaponMod3)">@displayEquipment("Left Weapon Mod 3", selectedCharacter.Equipment.LeftWeaponMod3.Item)</div>
                <div class="inventory-slot locked" @onclick="() => unEquip(selectedCharacter.Equipment.RightWeaponMod3)">@displayEquipment("Right Weapon Mod 3", selectedCharacter.Equipment.RightWeaponMod3.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                    <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Feet)">@displayEquipment("Feet", selectedCharacter.Equipment.Feet.Item)</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot" @onclick="() => unEquip(selectedCharacter.Equipment.Explosive)">@displayEquipment("Explosive", selectedCharacter.Equipment.Explosive.Item)</div>
            </div>
        </div>
        <div class="column" style="border-left: 5px solid black; width:200px; display:flex; justify-content: center; padding: 0;">
            <div style="overflow-y:scroll; height: 260px; border-bottom: 5px solid black;">
                <div class="equipped-items-character">Main Character</div>
                <div class="equipped-items-character">Companion 1</div>
                <div class="equipped-items-character">Companion 2</div>
                <div class="equipped-items-character">Companion 3</div>
                <div class="equipped-items-character">Companion 4</div>
                <div class="equipped-items-character">Companion 5</div>
                <div class="equipped-items-character">Companion 6</div>                
                <div class="equipped-items-character">Companion 7</div>
                <div class="equipped-items-character">Companion 8</div>
                <div class="equipped-items-character">Companion 9</div>
            </div>
            <div style="border: 2px solid black; background-color: cornflowerblue; height: 263px; margin-bottom: 3px; overflow-y: scroll;">
                @getTotalEquipmentStatRender(selectedCharacter.Equipment)
            </div>
        </div>
    </div>
</div>


@code {
    public Character selectedCharacter = new Character();
    public RenderFragment? statTooltipFrag = null;
    public double MouseX;
    public double MouseY;
    public Item hoveredItem = null;

    public void renderTooltip(MouseEventArgs e, Item item)
    {
        statTooltipFrag =
        @<div>
            @item.Name <br>
            @if (item.IsWeapon)
                {
                    @getTooltipTextRender("Attack speed: ",item.AttackSpeed)
                    @getTooltipWeaponDamageRender("Slashing", item, item.PercentSlashingDamage);
                    @getTooltipWeaponDamageRender("Crushing", item, item.PercentCrushingDamage);
                    @getTooltipWeaponDamageRender("Piercing", item, item.PercentPiercingDamage);
                    @getTooltipWeaponDamageRender("Fire", item, item.PercentFireDamage);
                    @getTooltipWeaponDamageRender("Acid", item, item.PercentAcidDamage);
                    @getTooltipWeaponDamageRender("Shock", item, item.PercentShockDamage);
                    @getTooltipWeaponDamageRender("Poison", item, item.PercentPoisonDamage);
                }
                @if (item.IsArmor)
                {
                    @getDamageResistanceRender("Energy", item.EnergyDamageReduction);
                    @getDamageResistanceRender("Fire", item.FireDamageReduction, item.EnergyDamageReduction);
                    @getDamageResistanceRender("Acid", item.AcidDamageReduction, item.EnergyDamageReduction);
                    @getDamageResistanceRender("Poison", item.PoisonDamageReduction, item.EnergyDamageReduction);
                    @getDamageResistanceRender("Shock", item.ShockDamageReduction, item.EnergyDamageReduction);
                    @getDamageResistanceRender("Kinetic", item.KineticDamageReduction);
                    @getDamageResistanceRender("Slashing", item.SlashingDamageReduction, item.KineticDamageReduction);
                    @getDamageResistanceRender("Crushing", item.CrushingDamageReduction, item.KineticDamageReduction);
                    @getDamageResistanceRender("Piercing", item.PiercingDamageReduction, item.KineticDamageReduction);
                    @getDamageResistanceRender("Psychic", item.PsychicDamageReduction, item.PsychicDamageReduction);
                }
            </div>
    ;

        hoveredItem = item;
        MouseX = e.ClientX;
        MouseY = e.ClientY;

    }

    public void clearTooltip()
    {
        statTooltipFrag = null;
        hoveredItem = null;
    }

    protected override void OnInitialized()
    {
        selectedCharacter = characterState.MainCharacter;
    }

    private RenderFragment displayEquipment(string slotName, Item item)
    {
        if (item == null)
        {
            return @<text>@slotName</text>;
        }
        RenderFragment imageFragment  = 
        @<div>
            <img src=@item.Thumbnail style="width:100%" @onmouseover="(e) => renderTooltip(e, item)" @onmouseout=clearTooltip/>
            @if (hoveredItem == item && statTooltipFrag != null)
                {
                    <StatPopupComponent stats=statTooltipFrag/>
                }
        </div>;
        return imageFragment;
    }

    private void unEquip(EquipmentSlot equipmentSlot)
    {
        if (equipmentSlot.Item == null)
        {
            return;
        }
        Item unequippedItem = equipmentSlot.Item.CreateCopy();
        inventoryState.RemoveFromInventory(inventoryState.Inventory, unequippedItem, unequippedItem.Quantity);
        unequippedItem.Equipped = false;
        inventoryState.AddToInventory(inventoryState.Inventory, unequippedItem, unequippedItem.Quantity);
        equipmentSlot.Item = null;
    }

    private RenderFragment getTotalEquipmentStatRender(EquipmentSet equipment)
    {
        equipment.CalculateStats(characterState.MainCharacter);
        Stats s = equipment.Stats;
        RenderFragment frag =
        @<div>
            <li>Attack Speed: @s.AttackSpeed</li>
            @getWeaponDamageRender("Slashing", s.SlashingDamageMin, s.SlashingDamageMax)
            @getWeaponDamageRender("Piercing", s.PiercingDamageMin, s.PiercingDamageMax)
            @getWeaponDamageRender("Crushing", s.CrushingDamageMin, s.CrushingDamageMax)
            @getWeaponDamageRender("Fire", s.FireDamageMin, s.FireDamageMax)
            @getWeaponDamageRender("Acid", s.AcidDamageMin, s.AcidDamageMax)
            @getWeaponDamageRender("Poison", s.PoisonDamageMin, s.PoisonDamageMax)
            @getWeaponDamageRender("Shock", s.ShockDamageMin, s.ShockDamageMax)
            @getDefenseRender("Kinetic", s.KineticDefense)
            @getDefenseRender("Energy", s.EnergyDefense)
            @getDefenseRender("Psychic", s.PsychicDefense)
            @getDefenseRender("Melee", s.MeleeDefense)
            @getDefenseRender("Ranged", s.RangedDefense)
            @getDefenseRender("Explosive", s.ExplosiveDefense)
            @getDamageResistanceRender("Energy", s.EnergyDR)
            @getDamageResistanceRender("Fire", s.FireDR, s.EnergyDR)
            @getDamageResistanceRender("Acid", s.AcidDR, s.EnergyDR)
            @getDamageResistanceRender("Poison", s.PoisonDR, s.EnergyDR)
            @getDamageResistanceRender("Shock", s.ShockDR, s.EnergyDR)
            @getDamageResistanceRender("Kinetic", s.KineticDR)
            @getDamageResistanceRender("Piercing", s.PiercingDR, s.KineticDR)
            @getDamageResistanceRender("Slashing", s.SlashingDR, s.KineticDR)
            @getDamageResistanceRender("Crushing", s.CrushingDR, s.KineticDR)
        </div>;
        return frag;
    }

    RenderFragment? getWeaponDamageRender(string type, int minDamage, int maxDamage)
    {
        if (minDamage <= 0 && maxDamage <= 0)
        {
            return null;
        }
        return @<li>@minDamage - @maxDamage @type Damage</li>;
    }

    RenderFragment? getDefenseRender(string type, int defense)
    {
        if (defense <= 0)
        {
            return null;
        }
        return@<li>@type Defense: @defense</li>;
    }

    RenderFragment getDamageResistanceRender(string type, int resistance, int? parentResistance = 0)
    {
        if (resistance > 0 && resistance > parentResistance)
        {
            return @<li>@type Damage Resistance: @resistance</li>;
        }
        return null;
    }

    RenderFragment? getTooltipWeaponDamageRender(string type, Item item, int? percentDamage = null)
    {
        int percent = percentDamage ?? 0;
        return @getWeaponDamageRender(type, percent * item.MinBaseDamage / 100, percent * item.MaxBaseDamage / 100);
    }

    RenderFragment? getTooltipTextRender(string statName, int stat)
    {
        if (stat <= 0)
        {
            return@<text>@statName: @stat<br></text>;
        }
        return null;
    }
}
