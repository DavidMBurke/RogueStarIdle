@page "/equippedItems"
@using RogueStarIdle.ServerApplication.Shared.State;
@inject CharacterState characterState
@inject InventoryState inventoryState

<div class="page-content-container">
    <div class="row" style="width:auto; height: 75px;">
        <div class="inventory-grid-container">
            <div class="equipment-row">
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.BrainCybernetic1/>
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.BrainCybernetic2 />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.BrainCybernetic3 />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Droid />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.BodyCybernetic1 />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.BodyCybernetic2 />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.BodyCybernetic3 />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Head />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.DroidMod />
            </div>
            <div class="equipment-row">
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Neck />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.LeftWeapon />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.RightWeapon />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Back />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Torso />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.OmniLinkMod />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Survival />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.LeftWeaponMod1 />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.RightWeaponMod1 />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Hands />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Belt />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Stim />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.LeftWeaponMod2 />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.RightWeaponMod2 />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Legs />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Aid />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.LeftWeaponMod3 />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.RightWeaponMod3 />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Feet />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@characterState.SelectedCharacter.Equipment.Explosive />
            </div>
        </div>
        <div class="column" style="border-left: 5px solid black; width:200px; display:flex; justify-content: center; padding: 0;">
            <div style="overflow-y:scroll; height: 260px; border-bottom: 5px solid black;">
                @foreach (Character character in characterList)
                {
                    <div @onclick="() => SelectCharacter(character)" class="equipped-items-character">@character.Name</div>                    
                }
            </div>
            <div style="border: 2px solid black; background-color: cornflowerblue; height: 263px; margin-bottom: 3px; overflow-y: scroll;">
                @getTotalEquipmentStatRender(characterState.SelectedCharacter.Equipment)
            </div>
        </div>
    </div>
</div>


@code {
    public RenderFragment? statTooltipFrag = null;
    public double MouseX;
    public double MouseY;
    public Item hoveredItem = null;
    public List<Character> characterList = new List<Character>();

    async Task UpdateState()
    {
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        characterState.OnChange += UpdateState;
        characterList.Add(characterState.MainCharacter);
        characterList.AddRange(characterState.SideCharacters);
    }

    private async void SelectCharacter(Character character)
    {
        characterState.SelectCharacter(character);
        await InvokeAsync(StateHasChanged);
    }


    private RenderFragment getTotalEquipmentStatRender(EquipmentSet equipment)
    {
        equipment.CalculateStats(characterState.MainCharacter);
        Stats s = equipment.Stats;
        RenderFragment frag =
        @<div>
            <li>Attack Speed: @s.AttackSpeed</li>
            @getWeaponDamageRender("Slashing", s.SlashingDamageMin, s.SlashingDamageMax)
            @getWeaponDamageRender("Piercing", s.PiercingDamageMin, s.PiercingDamageMax)
            @getWeaponDamageRender("Crushing", s.CrushingDamageMin, s.CrushingDamageMax)
            @getWeaponDamageRender("Fire", s.FireDamageMin, s.FireDamageMax)
            @getWeaponDamageRender("Acid", s.AcidDamageMin, s.AcidDamageMax)
            @getWeaponDamageRender("Poison", s.PoisonDamageMin, s.PoisonDamageMax)
            @getWeaponDamageRender("Shock", s.ShockDamageMin, s.ShockDamageMax)
            @getDefenseRender("Kinetic", s.KineticDefense)
            @getDefenseRender("Energy", s.EnergyDefense)
            @getDefenseRender("Psychic", s.PsychicDefense)
            @getDefenseRender("Melee", s.MeleeDefense)
            @getDefenseRender("Ranged", s.RangedDefense)
            @getDefenseRender("Explosive", s.ExplosiveDefense)
            @getDamageResistanceRender("Energy", s.EnergyDR)
            @getDamageResistanceRender("Fire", s.FireDR, s.EnergyDR)
            @getDamageResistanceRender("Acid", s.AcidDR, s.EnergyDR)
            @getDamageResistanceRender("Poison", s.PoisonDR, s.EnergyDR)
            @getDamageResistanceRender("Shock", s.ShockDR, s.EnergyDR)
            @getDamageResistanceRender("Kinetic", s.KineticDR)
            @getDamageResistanceRender("Piercing", s.PiercingDR, s.KineticDR)
            @getDamageResistanceRender("Slashing", s.SlashingDR, s.KineticDR)
            @getDamageResistanceRender("Crushing", s.CrushingDR, s.KineticDR)
        </div>;
        return frag;
    }

    RenderFragment? getWeaponDamageRender(string type, int minDamage, int maxDamage)
    {
        if (minDamage <= 0 && maxDamage <= 0)
        {
            return null;
        }
        return @<li>@minDamage - @maxDamage @type Damage</li>;
    }

    RenderFragment? getDefenseRender(string type, int defense)
    {
        if (defense > 0)
        {
            return@<li>@type Defense: @defense</li>;
        }
        return null;
    }

    RenderFragment getDamageResistanceRender(string type, int resistance, int? parentResistance = 0)
    {
        if (resistance > 0 && resistance > parentResistance)
        {
            return @<li>@type Damage Resistance: @resistance</li>;
        }
        return null;
    }
}
