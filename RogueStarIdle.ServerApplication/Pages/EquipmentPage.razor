@page "/equippedItems"
@using RogueStarIdle.ServerApplication.Shared.State;
@inject EquipmentState equipmentState

<div class="page-content-container">
    <div class="row" style="width:auto; height: 75px;">
        <div class="inventory-grid-container">
            <div class="equipment-row">
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.BrainCybernetic1.Item?.Name, "Brain Cybernetic 1")</div>
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.BrainCybernetic2.Item?.Name, "Brain Cybernetic 2")</div>
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.BrainCybernetic3.Item?.Name, "Brain Cybernetic 3")</div>
                <div class="inventory-spacer"/>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.Droid.Item?.Name, "Droid")</div>
            </div>
            <div class="equipment-row">
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.BodyCybernetic1.Item?.Name, "Body Cybernetic 1")</div>
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.BodyCybernetic2.Item?.Name, "Body Cybernetic 2")</div>
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.BodyCybernetic3.Item?.Name, "Body Cybernetic 3")</div>
                <div class="inventory-spacer" />
                <div class="inventory-slot"> @displayEquipment(equipmentState.MainCharacterEquipment.Head.Item?.Name, "Head") </div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.DroidMod.Item?.Name, "Droid Mod")</div>
            </div>
            <div class="equipment-row">
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Neck.Item?.Name, "Neck")</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.LeftWeapon.Item?.Name, "Left Weapon")</div>
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.RightWeapon.Item?.Name, "Right Weapon")</div>
                <div class="inventory-spacer" />
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Back.Item?.Name, "Back")</div>
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Chest.Item?.Name, "Chest")</div>
                <div class="inventory-slot locked">OmniLink Mod</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.LeftWeaponMod1.Item?.Name, "Left Weapon Mod 1")</div>
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.RightWeaponMod1.Item?.Name, "Right Weapon Mod 1")</div>
                <div class="inventory-spacer" />
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Hands.Item?.Name, "Hands")</div>
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Belt.Item?.Name, "Belt")</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Stim.Item?.Name, "Stim")</div>
            </div>
            <div class="equipment-row">
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.LeftWeaponMod2.Item?.Name, "Left Weapon Mod 2")</div>
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.RightWeaponMod2.Item?.Name, "Right Weapon Mod 2")</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Legs.Item?.Name, "Legs")</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.HealthPack.Item?.Name, "Health Pack")</div>
            </div>
            <div class="equipment-row">
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.LeftWeaponMod3.Item?.Name, "Left Weapon Mod 3")</div>
                <div class="inventory-slot locked">@displayEquipment(equipmentState.MainCharacterEquipment.RightWeaponMod3.Item?.Name, "Right Weapon Mod 3")</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Feet.Item?.Name, "Feet")</div>
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-slot">@displayEquipment(equipmentState.MainCharacterEquipment.Explosive.Item?.Name, "Explosive")</div>
            </div>
        </div>
        <div class="column" style="border-left: 5px solid black; width:200px; display:flex; justify-content: center; padding: 0;">
            <div style="overflow-y:scroll; height: 260px; border-bottom: 5px solid black;">
                <div class="equipped-items-character">Main Character</div>
                <div class="equipped-items-character">Companion 1</div>
                <div class="equipped-items-character">Companion 2</div>
                <div class="equipped-items-character">Companion 3</div>
                <div class="equipped-items-character">Companion 4</div>
                <div class="equipped-items-character">Companion 5</div>
                <div class="equipped-items-character">Companion 6</div>                
                <div class="equipped-items-character">Companion 7</div>
                <div class="equipped-items-character">Companion 8</div>
                <div class="equipped-items-character">Companion 9</div>
            </div>
            <div style="border: 2px solid black; background-color: cornflowerblue; height: 263px; margin-bottom: 3px; overflow-y: scroll;">
                @calculateStats(equipmentState.MainCharacterEquipment)
            </div>

        </div>
    </div>
</div>


@code {
    private string displayEquipment(string itemName, string slotName)
    {
        if (string.IsNullOrEmpty(itemName))
        {
            return slotName;
        }
        return itemName;
    }

    private MarkupString calculateStats(EquipmentSet equipment)
    {
        int minDamage = 0;
        int maxDamage = 0;
        int energyDefense = 0;
        int kineticDefense = 0;
        int psychicDefense = 0;
        int meleeDefense = 0;
        int rangedDefense = 0;
        int explosiveDefense = 0;
        int energyDR = 0;
        int fireDR = 0;
        int acidDR = 0;
        int poisonDR = 0;
        int shockDR = 0;
        int kineticDR = 0;
        int piercingDR = 0;
        int crushingDR = 0;
        int slashingDR = 0;
        int psychicDR = 0;
        int fireDamage = 0;
        int acidDamage = 0;
        int poisonDamage = 0;
        int shockDamage = 0;
        int piercingDamage = 0;
        int crushingDamage = 0;
        int slashingDamage = 0;
        foreach (var property in typeof(EquipmentSet).GetProperties())
        {
            if (property.PropertyType == typeof(EquipmentSlot))
            {
                EquipmentSlot slot = (EquipmentSlot)property.GetValue(equipment);
                if (slot.Item != null)
                {
                    minDamage += slot.Item.MinBaseDamage;
                    maxDamage += slot.Item.MaxBaseDamage;
                    energyDefense += slot.Item.EnergyDefense;
                    kineticDefense += slot.Item.KineticDefense;
                    psychicDefense += slot.Item.PsychicDefense;
                    meleeDefense += slot.Item.MeleeDefense;
                    rangedDefense += slot.Item.RangedDefense;
                    explosiveDefense += slot.Item.ExplosiveDefense;
                    energyDR += slot.Item.EnergyDamageReduction;
                    fireDR += Math.Max(slot.Item.EnergyDamageReduction, slot.Item.FireDamageReduction);
                    acidDR += Math.Max(slot.Item.EnergyDamageReduction, slot.Item.AcidDamageReduction);
                    poisonDR += Math.Max(slot.Item.EnergyDamageReduction, slot.Item.PoisonDamageReduction);
                    shockDR += Math.Max(slot.Item.EnergyDamageReduction, slot.Item.ShockDamageReduction);
                    kineticDR += slot.Item.KineticDamageReduction;
                    piercingDR += Math.Max(slot.Item.KineticDamageReduction, slot.Item.PiercingDamageReduction);
                    crushingDR += Math.Max(slot.Item.KineticDamageReduction, slot.Item.CrushingDamageReduction);
                    slashingDR += Math.Max(slot.Item.KineticDamageReduction, slot.Item.SlashingDamageReduction);
                    psychicDR += slot.Item.PsychicDamageReduction;
                    fireDamage += slot.Item.PercentFireDamage;
                    acidDamage += slot.Item.PercentFireDamage;
                    poisonDamage += slot.Item.PercentPoisonDamage;
                    shockDamage += slot.Item.PercentShockDamage;
                    piercingDamage += slot.Item.PercentPiercingDamage;
                    slashingDamage += slot.Item.PercentSlashingDamage;
                    crushingDamage += slot.Item.PercentCrushingDamage;
                }
            }
        }
        string markup = "";
        markup += weaponDamageMarkup("Slashing", minDamage, maxDamage, slashingDamage);
        markup += weaponDamageMarkup("Piercing", minDamage, maxDamage, piercingDamage);
        markup += weaponDamageMarkup("Crushing", minDamage, maxDamage, crushingDamage);
        markup += weaponDamageMarkup("Fire", minDamage, maxDamage, fireDamage);
        markup += weaponDamageMarkup("Acid", minDamage, maxDamage, acidDamage);
        markup += weaponDamageMarkup("Poison", minDamage, maxDamage, poisonDamage);
        markup += weaponDamageMarkup("Shock", minDamage, maxDamage, shockDamage);
        markup += defenseMarkup("Kinetic", kineticDefense);
        markup += defenseMarkup("Energy", energyDefense);
        markup += defenseMarkup("Psychic", psychicDefense);
        markup += defenseMarkup("Melee", meleeDefense);
        markup += defenseMarkup("Ranged", rangedDefense);
        markup += defenseMarkup("Explosive", explosiveDefense);
        markup += damageResistanceMarkup("Energy", energyDR);
        markup += damageResistanceMarkup("Fire", fireDR, energyDR);
        markup += damageResistanceMarkup("Acid", acidDR, energyDR);
        markup += damageResistanceMarkup("Poison", poisonDR, energyDR);
        markup += damageResistanceMarkup("Shock", shockDR, energyDR);
        markup += damageResistanceMarkup("Kinetic", kineticDR);
        markup += damageResistanceMarkup("Piercing", piercingDR, kineticDR);
        markup += damageResistanceMarkup("Slashing", slashingDR, kineticDR);
        markup += damageResistanceMarkup("Crushing", crushingDR, kineticDR);
        return new MarkupString(markup);
    }

    MarkupString weaponDamageMarkup(string type, int minDamage, int maxDamage, int percentage)
    {
        if (percentage == 0)
        {
            return new MarkupString("");
        }
        int minTypedDamage = (minDamage * percentage) / 100;
        int maxTypedDamage = (maxDamage * percentage) / 100;
        string markup = $"<p>{minTypedDamage} - {maxTypedDamage} Slashing Damage</p>";
        return new MarkupString(markup);
    }

    MarkupString defenseMarkup(string type, int defense)
    {
        string markup = "";
        if (defense > 0)
            markup = $"<p>{type} Defense: {defense}</p>";
        return new MarkupString(markup);
    }

    MarkupString damageResistanceMarkup(string type, int resistance)
    {
        string markup = "";
        if (resistance > 0)
            markup += $"<p>{type} Damage Resistance: {resistance}";
        return new MarkupString(markup);
    }

    MarkupString damageResistanceMarkup(string type, int resistance, int parentResistance)
    {
        string markup = "";
        if (resistance > 0 && resistance > parentResistance)
            markup += $"<p>{type} Damage Resistance: {resistance}";
        return new MarkupString(markup);
    }
}
