@page "/equippedItems"
@using RogueStarIdle.ServerApplication.Shared.State;
@inject CharacterState characterState
@inject InventoryState inventoryState

<div class="page-content-container">
    <div class="row" style="width:auto; height: 75px;">
        <div class="inventory-grid-container">
            <div class="equipment-row">
                <InventorySlotComponent slot=@selectedCharacter.Equipment.BrainCybernetic1/>
                <InventorySlotComponent slot=@selectedCharacter.Equipment.BrainCybernetic2/>
                <InventorySlotComponent slot=@selectedCharacter.Equipment.BrainCybernetic3 />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Droid />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@selectedCharacter.Equipment.BodyCybernetic1 />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.BodyCybernetic2 />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.BodyCybernetic3 />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Head />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.DroidMod />
            </div>
            <div class="equipment-row">
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Neck />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@selectedCharacter.Equipment.LeftWeapon />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.RightWeapon />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Back />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Torso />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.OmniLinkMod />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@selectedCharacter.Equipment.LeftWeaponMod1 />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.RightWeaponMod1 />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Hands />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Belt />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Stim />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@selectedCharacter.Equipment.LeftWeaponMod2 />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.RightWeaponMod2 />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Legs />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.HealthPack />
            </div>
            <div class="equipment-row">
                <InventorySlotComponent slot=@selectedCharacter.Equipment.LeftWeaponMod3 />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.RightWeaponMod3 />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Feet />
                <div class="inventory-spacer" />
                <div class="inventory-spacer" />
                <InventorySlotComponent slot=@selectedCharacter.Equipment.Explosive />
            </div>
        </div>
        <div class="column" style="border-left: 5px solid black; width:200px; display:flex; justify-content: center; padding: 0;">
            <div style="overflow-y:scroll; height: 260px; border-bottom: 5px solid black;">
                <div class="equipped-items-character">Main Character</div>
                <div class="equipped-items-character">Companion 1</div>
                <div class="equipped-items-character">Companion 2</div>
                <div class="equipped-items-character">Companion 3</div>
                <div class="equipped-items-character">Companion 4</div>
                <div class="equipped-items-character">Companion 5</div>
                <div class="equipped-items-character">Companion 6</div>                
                <div class="equipped-items-character">Companion 7</div>
                <div class="equipped-items-character">Companion 8</div>
                <div class="equipped-items-character">Companion 9</div>
            </div>
            <div style="border: 2px solid black; background-color: cornflowerblue; height: 263px; margin-bottom: 3px; overflow-y: scroll;">
                @getTotalEquipmentStatRender(selectedCharacter.Equipment)
            </div>
        </div>
    </div>
</div>


@code {
    public Character selectedCharacter = new Character();
    public RenderFragment? statTooltipFrag = null;
    public double MouseX;
    public double MouseY;
    public Item hoveredItem = null;

    protected override void OnInitialized()
    {
        selectedCharacter = characterState.MainCharacter;
    }


    private RenderFragment getTotalEquipmentStatRender(EquipmentSet equipment)
    {
        equipment.CalculateStats(characterState.MainCharacter);
        Stats s = equipment.Stats;
        RenderFragment frag =
        @<div>
            <li>Attack Speed: @s.AttackSpeed</li>
            @getWeaponDamageRender("Slashing", s.SlashingDamageMin, s.SlashingDamageMax)
            @getWeaponDamageRender("Piercing", s.PiercingDamageMin, s.PiercingDamageMax)
            @getWeaponDamageRender("Crushing", s.CrushingDamageMin, s.CrushingDamageMax)
            @getWeaponDamageRender("Fire", s.FireDamageMin, s.FireDamageMax)
            @getWeaponDamageRender("Acid", s.AcidDamageMin, s.AcidDamageMax)
            @getWeaponDamageRender("Poison", s.PoisonDamageMin, s.PoisonDamageMax)
            @getWeaponDamageRender("Shock", s.ShockDamageMin, s.ShockDamageMax)
            @getDefenseRender("Kinetic", s.KineticDefense)
            @getDefenseRender("Energy", s.EnergyDefense)
            @getDefenseRender("Psychic", s.PsychicDefense)
            @getDefenseRender("Melee", s.MeleeDefense)
            @getDefenseRender("Ranged", s.RangedDefense)
            @getDefenseRender("Explosive", s.ExplosiveDefense)
            @getDamageResistanceRender("Energy", s.EnergyDR)
            @getDamageResistanceRender("Fire", s.FireDR, s.EnergyDR)
            @getDamageResistanceRender("Acid", s.AcidDR, s.EnergyDR)
            @getDamageResistanceRender("Poison", s.PoisonDR, s.EnergyDR)
            @getDamageResistanceRender("Shock", s.ShockDR, s.EnergyDR)
            @getDamageResistanceRender("Kinetic", s.KineticDR)
            @getDamageResistanceRender("Piercing", s.PiercingDR, s.KineticDR)
            @getDamageResistanceRender("Slashing", s.SlashingDR, s.KineticDR)
            @getDamageResistanceRender("Crushing", s.CrushingDR, s.KineticDR)
        </div>;
        return frag;
    }

    RenderFragment? getWeaponDamageRender(string type, int minDamage, int maxDamage)
    {
        if (minDamage <= 0 && maxDamage <= 0)
        {
            return null;
        }
        return @<li>@minDamage - @maxDamage @type Damage</li>;
    }

    RenderFragment? getDefenseRender(string type, int defense)
    {
        if (defense > 0)
        {
            return@<li>@type Defense: @defense</li>;
        }
        return null;
    }

    RenderFragment getDamageResistanceRender(string type, int resistance, int? parentResistance = 0)
    {
        if (resistance > 0 && resistance > parentResistance)
        {
            return @<li>@type Damage Resistance: @resistance</li>;
        }
        return null;
    }
}
