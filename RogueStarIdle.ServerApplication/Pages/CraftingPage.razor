@page "/crafting"
@using RogueStarIdle.ServerApplication.Shared.State;
@inject TimeState timeState;
@inject InventoryState inventoryState;
@inject ActionState actionState;
@inject IItemUseCases GetItemByIdUseCase

<div class="page-content-container" style="display: flex; align-items: flex-start;">
    <div class="column" style="width: 100%;">
        <h3>CRAFTING</h3>
        <div class="row" style="width: 100%; height: 100%;">
            <div style="display:flex; flex-direction:column; align-items: flex-start; width: 25%">
                <button @onclick='() => SelectScrapping()' class="selection-button">Scrap</button>
                <button @onclick='() => SelectRecipeList(weaponRecipes)' class ="selection-button">Weapons</button>
                <button @onclick='() => SelectRecipeList(armorRecipes)' class="selection-button">Armor</button>
                <button @onclick='() => SelectRecipeList(constructionRecipes)' class="selection-button">Building Materials</button>
                <button @onclick='() => SelectRecipeList(aidRecipes)' class="selection-button">Aid</button>
                <button @onclick='() => SelectRecipeList(huntingRecipes)' class="selection-button">Hunting</button>
            </div>
            <div style="display:flex; flex-direction:column; align-items: flex-start; width: 25%">
                @if (!scrappingSelected) {
                    @foreach (CraftingRecipe recipe in selectedRecipeList)
                    { 
                        <button @onclick='() => SelectCraftRecipe(recipe)' class="selection-button">@recipe.Item.Name</button>
                    }
                }
                @if (scrappingSelected) {
                    @foreach (ScrapRecipe recipe in scrapRecipes)
                    {
                        Item inventoryItem = inventoryState.Inventory.FirstOrDefault(i => i.Id == recipe.Item.Id) ?? new Item();
                        if (inventoryItem.Quantity == 0)
                        {
                            continue;
                        }
                        <button @onclick='() => SelectScrapRecipe(recipe)' class="selection-button">@recipe.Item.Name</button>
                    }
                }
            </div>
            <div style="display: flex; flex-direction: column; align-items: center; width: 50%">
                @if (actionState.SelectedCraftingRecipe.Item.Name != "" && !scrappingSelected)
                {
                    <h2>@actionState.SelectedCraftingRecipe.Item.Name</h2>
                    <img src=@actionState.SelectedCraftingRecipe.Item.Thumbnail style="width: 25%; border: solid black  2px" />
                    <p>Requires:</p>
                    @foreach ((Item item, int qty) in actionState.SelectedCraftingRecipe.Ingredients)
                    {
                        Item inventoryItem = inventoryState.Inventory.FirstOrDefault(i => i.Id == item.Id) ?? new Item();
                        int inventoryQuantity = inventoryItem.Quantity;
                        <p>@qty.ToString() x @item.Name (@inventoryQuantity)</p>
                    }
                    @if (!actionState.IsCrafting)
                    {
                        <button @onclick="() => actionState.EnterCrafting()">Craft</button>
                    }
                    @if (actionState.IsCrafting)
                    {
                        <LoadBarComponent amountComplete=(actionState.TicksBetweenAction-actionState.TicksUntilAction) total=actionState.TicksBetweenAction color="blue" />
                        <button @onclick="() => actionState.LeaveCrafting()">Stop</button>
                    }
                }
                @if (actionState.SelectedScrapRecipe.Item.Name != "" && scrappingSelected)
                {
                    Item inventoryItem = inventoryState.Inventory.FirstOrDefault(i => i.Id == actionState.SelectedScrapRecipe.Item.Id) ?? new Item();
                    <h2>@actionState.SelectedScrapRecipe.Item.Name (@inventoryItem.Quantity)</h2>
                    <img src=@actionState.SelectedScrapRecipe.Item.Thumbnail style="width: 25%; border: solid black  2px" />
                    <p>Scrap:</p>
                    @foreach (Scrap scrap in actionState.SelectedScrapRecipe.ScrapList)
                    {
                        <p>@scrap.Item.Name: @scrap.QuantityMin-@scrap.QuantityMax</p>
                    };
                    @if (!actionState.IsScrapping)
                    {
                        <button @onclick="() => actionState.EnterScrapping()">Scrap</button>
                    }
                    @if (actionState.IsScrapping)
                    {
                        <LoadBarComponent amountComplete=(actionState.TicksBetweenAction-actionState.TicksUntilAction) total=actionState.TicksBetweenAction color="blue" />
                        <button @onclick="() => actionState.LeaveScrapping()">Stop</button>
                    }

                }
            </div>
        </div>
    </div>
</div>

@code {
    public List<CraftingRecipe> selectedRecipeList = new List<CraftingRecipe>();
    public List<ScrapRecipe> scrapRecipes = new List<ScrapRecipe>();
    public List<CraftingRecipe> weaponRecipes = new List<CraftingRecipe>();
    public List<CraftingRecipe> armorRecipes = new List<CraftingRecipe>();
    public List<CraftingRecipe> aidRecipes = new List<CraftingRecipe>();
    public List<CraftingRecipe> constructionRecipes = new List<CraftingRecipe>();
    public List<CraftingRecipe> huntingRecipes = new List<CraftingRecipe>();
    public bool scrappingSelected = false;

    async Task UpdateState()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void SelectRecipeList(List<CraftingRecipe> recipeList)
    {
        scrappingSelected = false;
        selectedRecipeList = recipeList;
    }

    public void SelectScrapping()
    {
        scrappingSelected = true;
    }

    public void SelectCraftRecipe(CraftingRecipe recipe)
    {
        if (actionState.IsCrafting)
        {
            actionState.LeaveCrafting();
        }
        actionState.SelectedCraftingRecipe = recipe;
        actionState.SelectedScrapRecipe = new ScrapRecipe(); 
    }

    public void SelectScrapRecipe(ScrapRecipe recipe)
    {
        if (actionState.IsScrapping)
        {
            actionState.LeaveScrapping();
        }
        actionState.SelectedScrapRecipe = recipe;
        actionState.SelectedCraftingRecipe = new CraftingRecipe();
    }

    protected override async Task OnInitializedAsync()
    {
        inventoryState.OnChange += UpdateState;
        actionState.OnChange += UpdateState;
        scrapRecipes = new List<ScrapRecipe>()
        {
            new ScrapRecipe()
            {
                Item = await GetItemByIdUseCase.ExecuteAsync(15), // Tardihop Fur
                ScrapList = new List<Scrap>()
                {
                    new Scrap(await GetItemByIdUseCase.ExecuteAsync(1), 1, 1, 1, 1) // Animal Skins
                }
            },
            new ScrapRecipe()
            {
                Item = await GetItemByIdUseCase.ExecuteAsync(13), // Tardihop Guts
                ScrapList = new List<Scrap>()
                {
                    new Scrap(await GetItemByIdUseCase.ExecuteAsync(0), 1, 1, 1, 1) // Animal Parts
                }
            },
            new ScrapRecipe()
            {
                Item = await GetItemByIdUseCase.ExecuteAsync(2), // Small Bones
                ScrapList = new List<Scrap>()
                {
                    new Scrap(await GetItemByIdUseCase.ExecuteAsync(19), 1, 1, 1, 1) // Bonemeal
                }
            },
            new ScrapRecipe()
            {
                Item = await GetItemByIdUseCase.ExecuteAsync(3), // Azurali Grass
                ScrapList = new List<Scrap>()
                {
                    new Scrap(await GetItemByIdUseCase.ExecuteAsync(16), 1, 1, 1, 1) // Plant Fiber
                }
            },
            new ScrapRecipe()
            {
                Item = await GetItemByIdUseCase.ExecuteAsync(14), // Stick
                ScrapList = new List<Scrap>()
                {
                    new Scrap(await GetItemByIdUseCase.ExecuteAsync(16), 1, 1, 1, 1) // Plant Fiber
                }
            }
        };
        constructionRecipes = new List<CraftingRecipe>()
        {

        };
        aidRecipes = new List<CraftingRecipe>()
        {
            new CraftingRecipe()
                {
                    Item = await GetItemByIdUseCase.ExecuteAsync(18), // Cloth Bandage
                    Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(16), 2), // Plant Fiber
                },
                    RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Medicine", 1)
                },
                    XpReward = ("Medicine", 1),
                    Unlocked = true
                }        
        };
        armorRecipes = new List<CraftingRecipe>()
        {
            new CraftingRecipe()
                {
                    Item = await GetItemByIdUseCase.ExecuteAsync(5), // Tardihop Fur Hat
                    Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(15), 2), // Tardihop Fur
                    (await GetItemByIdUseCase.ExecuteAsync(16), 2) // Plant Fiber
                },
                    RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Armor Crafting", 1)
                },
                    XpReward = ("Armor Crafting", 1),
                    Unlocked = true
                },
            new CraftingRecipe()
                {
                    Item = await GetItemByIdUseCase.ExecuteAsync(6), // Tardihop Fur Gloves
                    Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(15), 2), // Tardihop Fur
                    (await GetItemByIdUseCase.ExecuteAsync(16), 2) // Plant Fiber
                },
                    RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Armor Crafting", 1)
                },
                    XpReward = ("Armor Crafting", 1),
                    Unlocked = true
                },
            new CraftingRecipe()
                {
                    Item = await GetItemByIdUseCase.ExecuteAsync(7), // Tardihop Fur Shirt
                    Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(15), 5), // Tardihop Fur
                    (await GetItemByIdUseCase.ExecuteAsync(16), 10) // Plant Fiber
                },
                    RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Armor Crafting", 1)
                },
                    XpReward = ("Armor Crafting", 1),
                    Unlocked = true
                },
            new CraftingRecipe()
                {
                    Item = await GetItemByIdUseCase.ExecuteAsync(8), // Tardihop Fur Pants
                    Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(15), 5), // Tardihop Fur
                    (await GetItemByIdUseCase.ExecuteAsync(16), 10) // Plant Fiber
                },
                    RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Armor Crafting", 1)
                },
                    XpReward = ("Armor Crafting", 1),
                    Unlocked = true
                },
            new CraftingRecipe()
                {
                    Item = await GetItemByIdUseCase.ExecuteAsync(9), // Tardihop Fur Hat
                    Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(15), 2), // Tardihop Fur
                    (await GetItemByIdUseCase.ExecuteAsync(16), 3) // Plant Fiber
                },
                    RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Armor Crafting", 1)
                },
                    XpReward = ("Armor Crafting", 1),
                    Unlocked = true
                }
        };
        weaponRecipes = new List<CraftingRecipe>()
        {
            new CraftingRecipe()
                {
                    Item = await GetItemByIdUseCase.ExecuteAsync(4), // Bone Knife
                    Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(2), 1), // Small bones
                    (await GetItemByIdUseCase.ExecuteAsync(16), 2) // Plant Fiber
                },
                    RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Weapon Crafting", 1)
                },
                    XpReward = ("Weapon Crafting", 1),
                    Unlocked = true
                }
        };
        huntingRecipes = new List<CraftingRecipe>()
        {
            new CraftingRecipe()
                {
                    Item = await GetItemByIdUseCase.ExecuteAsync(17), // Tardihop Bait
                    Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(3), 1), // Azurali Grass
                },
                    RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Survival", 1)
                },
                    XpReward = ("Survival", 1),
                    Unlocked = true
                }
        };
    }
}
