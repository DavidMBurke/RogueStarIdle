@page "/crafting"
@using RogueStarIdle.ServerApplication.Shared.State;
@inject TimeState timeState;
@inject IItemUseCases GetItemByIdUseCase

<div class="page-content-container" style="display: flex; align-items: flex-start;">
    <div class="column" style="width: 100%;">
        <h3>CRAFTING</h3>
        <div class="row" style="width: 100%; height: 100%;">
            <div style="display:flex; flex-direction:column; align-items: flex-start; width: 25%">
                <button class="selection-button">Scrap</button>
                <button @onclick='() => SelectRecipeList(weaponRecipes)' class ="selection-button">Weapons</button>
                <button class="selection-button">Armor</button>
                <button class="selection-button">Building Materials</button>
                <button class="selection-button">Aid</button>
                <button class="selection-button">Hunting</button>
            </div>
            <div style="display:flex; flex-direction:column; align-items: flex-start; width: 25%">
                @foreach (CraftingRecipe recipe in selectedRecipeList)
                {
                    <button @onclick='() => SelectRecipe(recipe)' class="selection-button">@recipe.Item.Name</button>
                }
            </div>
            <div style="display: flex; flex-direction: column; align-items: center; width: 50%">
                @if (selectedRecipe.Item.Name != "")
                {
                    <h2>@selectedRecipe.Item.Name</h2>
                    <img src=@selectedRecipe.Item.Thumbnail style="width: 25%; border: solid black  2px"/>
                    <p>Requires:</p>
                    @foreach((Item, int) ingredient in selectedRecipe.Ingredients) {
                        <p>@ingredient.Item1.Name (@ingredient.Item2.ToString())</p>
                    }
                    <btn @onclick="() => Craft(selectedRecipe)">Craft</btn>
                }
            </div>      
        </div>
    </div>
</div>

@code {
    public List<CraftingRecipe> selectedRecipeList = new List<CraftingRecipe>();
    public CraftingRecipe selectedRecipe = new CraftingRecipe();
    public List<CraftingRecipe> weaponRecipes = new List<CraftingRecipe>();
    public List<CraftingRecipe> scrapRecipes = new List<CraftingRecipe>();

    public void SelectRecipeList(List<CraftingRecipe> recipeList)
    {
        selectedRecipeList = recipeList;
    }

    public void SelectRecipe(CraftingRecipe recipe)
    {
        selectedRecipe = recipe;
    }

    public void Craft(CraftingRecipe recipe)
    {
        
    }

    protected override async Task OnInitializedAsync()
    {

        weaponRecipes = new List<CraftingRecipe>()
        {
            new CraftingRecipe()
            {
                Item = await GetItemByIdUseCase.ExecuteAsync(4),
                Ingredients = new List<(Item, int)>
                {
                    (await GetItemByIdUseCase.ExecuteAsync(2), 1), // 1x Small bones
                    (await GetItemByIdUseCase.ExecuteAsync(16), 2) // 2x Plant Fiber
                },
                RequiredSkillLevels = new List<(string, int)>()
                {
                    ("Weapon Crafting", 1)
                },
                XpReward = new List<(string, int)>()
                {
                    ("Weapon Crafting", 1)
                },
                Unlocked = true
            }
        };

    }
}
