@page "/combatManagement"
@using RogueStarIdle.ServerApplication.Shared.State;
@using static RogueStarIdle.CoreBusiness.CombatRule;
@inject CharacterState characterState;

<div class="page-content-container" >
    <div class="column" style="width: 100%">
        <select @onchange="(e) => UpdateCharacter(e)">
            @foreach (Character character in characterListDropdown)
            {
                <option value="@character.Id" @key="character.Id">@character.Name</option>
            }
        </select>
        <div style="display: flex; justify-content: center; width: 100%">
            <div>
                <button @onclick="() => AddRule(selectedCharacter)">Add Rule</button>
            </div>
            <div>
                @if (characterState.MainCharacter.CombatRules.Count > 1)
                {
                    <button @onclick="() => RemoveRule(selectedCharacter)">Remove Rule</button>
                }
            </div>
        </div>
        <div class="column" style="width: 100%; align-content: flex-start">
            @foreach (CombatRule rule in selectedCharacter.CombatRules)
            {
                <RuleComponent rule=rule/>                
            }
        </div>
    </div>
</div>

@code {
    public int selectedCharacterId = 0;
    public Character selectedCharacter = new Character();

    public List<Character> characterListDropdown = new List<Character>();

    protected override void OnInitialized()
    {
        base.OnInitialized();
        characterListDropdown.AddRange(characterState.Party);
        selectedCharacterId = characterState.MainCharacter.Id;
        selectedCharacter = characterState.MainCharacter;
        characterState.OnChange += UpdateState;
    }

    private void AddRule(Character character)
    {
        characterState.AddCombatRule(character);
    }

    private void RemoveRule(Character character)
    {
        if (characterState.MainCharacter.CombatRules.Count <= 1)
        {
            return;
        }
        characterState.RemoveCombatRule(character);
    }

    private async void UpdateCharacter(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int id))
        {
            selectedCharacterId = id;
            selectedCharacter = characterListDropdown.FirstOrDefault(c => c.Id == selectedCharacterId);
            await UpdateState();
        }
    }

    private async Task UpdateState()
    {
        await InvokeAsync(StateHasChanged);
    }
}