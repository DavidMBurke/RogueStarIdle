@page "/skills"
@using RogueStarIdle.ServerApplication.Shared.State;
@inject CharacterState characterState

<div class="page-content-container">
    <div class="column" style="width: 100%; height: 100%; background-color: cornflowerblue; overflow-y: scroll; align-content: center; ">
        @displayAllStats(characterState.mainCharacter)
    </div>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        foreach (var property in typeof(Character).GetProperties())
        {
            if (property.PropertyType != typeof(Skill) || characterState == null)
            {
                continue;
            }
            (property.GetValue(characterState.mainCharacter) as Skill).OnChange += UpdateState;
        }
        await base.OnInitializedAsync();
    }

    async Task UpdateState()
    {
        await InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        foreach (var property in typeof(Character).GetProperties())
        {
            if (property.PropertyType != typeof(Skill) || characterState == null)
            {
                continue;
            }
            (property.GetValue(characterState.mainCharacter) as Skill).OnChange -= UpdateState;
        }
    }


    private MarkupString displayAllStats(Character character)
    {
        string markup = "";
        foreach (var property in typeof(Character).GetProperties())
        {
            if (property.PropertyType != typeof(Skill))
            {
                continue;
            }
            markup += displayStat(property.GetValue(character) as Skill);
        }
        return new MarkupString(markup);
    }

    private MarkupString displayStat(Skill skill)
    {
        string markup = $"<p> {skill.Name}: {skill.Level}   XP: {skill.Xp}/{skill.GetXpForNextLevel()}";
        return new MarkupString(markup);
    }
}
